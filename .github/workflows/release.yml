name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [amd64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup .npmrc for GitHub Packages
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> ~/.npmrc
          echo "@yuelioi:registry=https://npm.pkg.github.com" >> ~/.npmrc

      - name: Install Task
        run: choco install go-task -y

      - name: Install Wails CLI (for generate commands)
        run: go install github.com/wailsapp/wails/v3/cmd/wails3@latest

      - name: Install NSIS
        run: |
          choco install nsis -y

      - name: Add NSIS to PATH and verify
        run: |
          $env:PATH += ";C:\Program Files (x86)\NSIS"
          echo "C:\Program Files (x86)\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          & "C:\Program Files (x86)\NSIS\makensis.exe" /VERSION

      - name: Build Windows installer
        run: |
          # 先构建二进制文件
          task windows:build PRODUCTION=true

          # 验证文件存在
          if (Test-Path "bin\Ybub.exe") {
            Write-Host "✓ Ybub.exe built successfully"
            Get-Item "bin\Ybub.exe"
          } else {
            Write-Host "✗ Ybub.exe not found!"
            exit 1
          }

          # 设置纯 Windows 路径
          $rootDir = (Get-Location).Path
          $binPath = "$rootDir\bin\Ybub.exe"

          # 生成 WebView2 bootstrapper
          task windows:common:generate:icons
          Push-Location build\windows\nsis
          wails3 generate webview2bootstrapper -dir .

          # 使用正确的路径调用 makensis
          makensis "-DARG_WAILS_AMD64_BINARY=$binPath" project.nsi
          Pop-Location
        env:
          ARCH: ${{ matrix.arch }}

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-installer
          path: build/windows/nsis/*Installer*.exe
          retention-days: 5

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - arch: universal
            task: package:universal
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup .npmrc for GitHub Packages
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> ~/.npmrc
          echo "@yuelioi:registry=https://npm.pkg.github.com" >> ~/.npmrc

      - name: Install Task
        run: brew install go-task

      - name: Install Wails CLI (for generate commands)
        run: go install github.com/wailsapp/wails/v3/cmd/wails3@latest

      - name: Build macOS app
        run: task package
        env:
          PRODUCTION: "true"

      - name: Create DMG
        run: |
          # 安装 create-dmg
          brew install create-dmg

          # 移除隔离属性（重要！）
          xattr -cr "bin/Ybub.app"

          # 创建 DMG
          create-dmg \
            --volname "Ybub" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon-size 100 \
            --app-drop-link 450 185 \
            "bin/Ybub-${{ matrix.arch }}.dmg" \
            "bin/Ybub.app" || true

          # 移除 DMG 的隔离属性
          xattr -cr "bin/Ybub-${{ matrix.arch }}.dmg"

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-dmg
          path: bin/*.dmg
          retention-days: 5

  release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.exe
            artifacts/**/*.dmg
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
